package org.flexiblepower.defpi.lightsimulator.inflexible_controller;

import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.annotation.Generated;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;

import org.flexiblepower.defpi.lightsimulator.LightSimulator;
import org.flexiblepower.defpi.lightsimulator.LightSimulatorConfiguration;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.InflexibleController_efi20ConnectionHandler;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.InflexibleController_efi20ConnectionHandlerImpl;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CommodityEnum;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CurtailmentOption;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CurtailmentOptions;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CurtailmentProfile;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CurtailmentProfileElement;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CurtailmentQuantity;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.CurtailmentRange;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.DeviceClass;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.DeviceDescription;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.InflexibleCurtailmentOptions;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.InflexibleInstruction;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.InflexibleRegistration;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.InstructionStatus;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.efi_20.xml.SupportedCommodities;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.minimal_efi_20.InflexibleController_minimalEfi20ConnectionHandler;
import org.flexiblepower.defpi.lightsimulator.inflexible_controller.minimal_efi_20.InflexibleController_minimalEfi20ConnectionHandlerImpl;
import org.flexiblepower.service.Connection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * InflexibleControllerConnectionManagerImpl
 *
 * File generated by org.flexiblepower.create-service-maven-plugin.
 * NOTE: This file is generated as a stub, and has to be implemented by the user. Re-running the codegen plugin will
 * not change the contents of this file.
 * Template by TNO, 2017
 *
 * @author coenvl
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Nov 8, 2017 4:10:46 PM")
public class InflexibleControllerConnectionManagerImpl implements InflexibleControllerConnectionManager {

    private final Logger log = LoggerFactory.getLogger(InflexibleControllerConnectionManagerImpl.class);
    private final LightSimulator service;
    private final DatatypeFactory dataTypeFactory;

    /**
     * Auto-generated constructor building the factory for ConnectionHandlers of the provided service
     *
     * @param service The service that will be used as argument to instantiate the ConnectionHandlers
     */
    public InflexibleControllerConnectionManagerImpl(final LightSimulator service) {
        try {
            this.dataTypeFactory = DatatypeFactory.newInstance();
        } catch (final DatatypeConfigurationException e) {
            // This is unacceptable
            throw new RuntimeException(e);
        }
        this.service = service;
    }

    @Override
    public InflexibleController_efi20ConnectionHandler buildEfi20(final Connection connection) {
        this.registerSimulator(connection);
        final InflexibleController_efi20ConnectionHandlerImpl handler = new InflexibleController_efi20ConnectionHandlerImpl(
                connection,
                this);
        this.service.addMeasurementPublisher(handler);
        return handler;
    }

    @Override
    public InflexibleController_minimalEfi20ConnectionHandler buildMinimalEfi20(final Connection connection) {
        this.registerSimulator(connection);
        final InflexibleController_minimalEfi20ConnectionHandlerImpl handler = new InflexibleController_minimalEfi20ConnectionHandlerImpl(
                connection,
                this);
        this.service.addMeasurementPublisher(handler);
        return handler;
    }

    /**
     * @param connection
     */
    private void registerSimulator(final Connection connection) {
        final DeviceDescription deviceDescription = new DeviceDescription().withLabel("Light Simulator")
                .withDeviceClass(DeviceClass.MISCELLANEOUS);

        final SupportedCommodities commodities = new SupportedCommodities()
                .withCommodityType(CommodityEnum.ELECTRICITY);

        final InflexibleRegistration registration = new InflexibleRegistration().withEfiVersion("2.0")
                .withInstructionProcessingDelay(this.dataTypeFactory.newDuration(10))
                .withDeviceDescription(deviceDescription)
                .withSupportedCommodities(commodities);
        connection.send(registration);

        final LightSimulatorConfiguration config = this.service.getConfig();
        final CurtailmentOptions options = new CurtailmentOptions().withCurtailmentOption(new CurtailmentOption()
                .withCurtailmentQuantity(CurtailmentQuantity.ELECTRICITY_POWER)
                .withMinimalCurtailmentDuration(this.dataTypeFactory.newDuration(config.getMinimumOffTime() * 1000))
                .withCurtailmentRange(new CurtailmentRange().withLowerBound(config.getMinimumPower())
                        .withUpperBound(config.getMaximumPower())));

        final GregorianCalendar startTime = new GregorianCalendar();
        startTime.add(Calendar.SECOND, this.service.getConfig().getMinimumOnTime());
        final InflexibleCurtailmentOptions curtailmentOptions = new InflexibleCurtailmentOptions().withEfiVersion("2.0")
                .withValidFrom(this.dataTypeFactory.newXMLGregorianCalendar(startTime))
                .withCurtailmentOptions(options);

        connection.send(curtailmentOptions);
    }

    /**
     * @param instructionId
     * @return
     */
    public boolean revokeInstruction(final String instructionId) {
        return this.service.removeCurtailment(instructionId);
    }

    /**
     * @param message
     * @param startSign
     */
    public void handleInstruction(final InflexibleInstruction message, final InstructionStatusSender stateSender) {
        final CurtailmentProfile profile = message.getCurtailmentProfile();
        final Calendar startTime = message.getCurtailmentProfile().getStartTime().toGregorianCalendar();
        final LightSimulatorConfiguration config = this.service.getConfig();

        // Validate the instruction
        for (final CurtailmentProfileElement curtailment : message.getCurtailmentProfile()
                .getCurtailmentProfileElement()) {
            if ((curtailment.getDuration().getTimeInMillis(startTime) < (config.getMinimumOffTime() * 1000))
                    || (curtailment.getValue() > config.getMaximumPower())
                    || (curtailment.getValue() < config.getMinimumPower())) {
                if (stateSender != null) {
                    this.log.info("Rejecting curtailment for duration {} and power {}",
                            curtailment.getDuration(),
                            curtailment.getValue());
                    stateSender.sendUpdate(InstructionStatus.REJECTED);
                }
                return;
            }
        }

        this.service.addCurtailMent(message.getInstructionId(), profile, stateSender);
        if (stateSender != null) {
            stateSender.sendUpdate(InstructionStatus.ACCEPTED);
        }
    }

}
